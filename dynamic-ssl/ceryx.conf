map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

map $http_x_forwarded_proto $proxy_set_x_forwarded_proto {
    default $scheme;
    'http'  http;
    'https' https;
}

server {
    listen 80;
    listen 443 ssl;
    default_type text/html;

    ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
    ssl_certificate_by_lua_block {
        auto_ssl:ssl_certificate()
    }

    location /.well-known/acme-challenge {
        content_by_lua_block {
            auto_ssl:challenge_server()
        }
    }

    location / {
        set $container_url "fallback";

        # Lua files
        access_by_lua_file lualib/router.lua;

        # Proxy configuration
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-Proto $proxy_set_x_forwarded_proto;

        # Upgrade headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        proxy_pass http://$container_url$request_uri;
    }

    error_page 502 @bad_gateway;
    location @bad_gateway {
        set $fallback_url "";

        # Get fallback URL from environment
        access_by_lua_block {
            ngx.var.fallback_url = os.getenv("CERYX_FALLBACK")
            if not ngx.var.fallback_url then ngx.var.fallback_url = "www.something.com" end
        }

        # Proxy configuration
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-Proto $proxy_set_x_forwarded_proto;

        proxy_pass http://$fallback_url$request_uri;
    }
}

# Internal server running on port 8999 for handling certificate tasks.
server {
    listen 127.0.0.1:8999;
    location / {
        content_by_lua_block {
            auto_ssl:hook_server()
        }
    }
}
