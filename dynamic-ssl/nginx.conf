user www-data www-data;
worker_processes 1;
pid /run/nginx.pid;

env CERYX_REDIS_PREFIX;
env CERYX_REDIS_HOST;
env CERYX_REDIS_PORT;
env CERYX_SSL_PATTERN;
env CERYX_FALLBACK;

events {
    worker_connections 1024;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30s 30s;
    # Use the Docker internal DNS, pick your favorite if running outside of Docker
    resolver 127.0.0.11;

    # Logging
    access_log /dev/stdout;
    error_log /dev/stderr warn;

    # Lua settings
    lua_package_path "$prefix/lualib/?.lua;;";

    lua_shared_dict ceryx 1m;
    lua_shared_dict auto_ssl 1m;
    lua_code_cache on;

    # see https://github.com/openresty/lua-resty-core
    init_by_lua_block  {
        auto_ssl = (require "resty.auto-ssl").new()

        -- Define a function to determine which SNI domains to automatically handle
        -- and register new certificates for. Defaults to not allowing any domains,
        -- so this must be configured.
        auto_ssl:set("allow_domain", function(domain)
            local ceryx_ssl_pattern = os.getenv("CERYX_SSL_DOMAIN")
            if not ceryx_ssl_pattern then ceryx_ssl_pattern = '' end

            -- Add $ at the end, if it doesn't exist
            if string.match(ceryx_ssl_pattern, '\$$') == nil then
                ceryx_ssl_pattern = ceryx_ssl_pattern .. '\$$'
            end 
            return string.match(domain, ceryx_ssl_pattern) ~= nil
        end)
        
        -- Set the resty-auto-ssl storage to Redis, using the CERYX_* env variables
        local redis_host = os.getenv("CERYX_REDIS_HOST")
        if not redis_host then redis_host = "127.0.0.1" end
        local redis_port = os.getenv("CERYX_REDIS_PORT")
        if not redis_port then redis_port = 6379 end
        auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
        auto_ssl:set("redis", {
            host = redis_host,
            port = redis_port
        })

        auto_ssl:init()
        require "resty.core"
    }

    init_worker_by_lua_block {
        auto_ssl:init_worker()
    }

    # Includes
    include mime.types;
    include ../sites-enabled/*;
}
